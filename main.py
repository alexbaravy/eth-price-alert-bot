import asyncio
import aiohttp
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import Message
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)
COINGECKO_API_URL = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "300"))      # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 —Å–µ–∫
PRICE_THRESHOLD = float(os.getenv("PRICE_THRESHOLD", "50"))   # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é $50

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
user_ids = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
last_eth_price = None
last_notification_price = None


class EthereumPriceTracker:
    def __init__(self):
        self.session = None

    async def create_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            self.session = aiohttp.ClientSession()

    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()

    async def get_eth_price(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ Ethereum"""
        try:
            await self.create_session()
            async with self.session.get(COINGECKO_API_URL) as response:
                if response.status == 200:
                    data = await response.json()
                    price = data['ethereum']['usd']
                    return float(price)
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
            return None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
price_tracker = EthereumPriceTracker()


@dp.message(CommandStart())
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_ids.add(message.from_user.id)
    await message.answer(
        "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞ Ethereum!\n\n"
        "üìä –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫—É—Ä—Å–∞ ETH –∫–∞–∂–¥—ã–µ $50.\n"
        "‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/price - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
        "/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    )


@dp.message(lambda message: message.text == "/price")
async def price_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /price"""
    current_price = await price_tracker.get_eth_price()
    if current_price:
        await message.answer(
            f"üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å Ethereum: ${current_price:,.2f}\n"
            f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(lambda message: message.text == "/status")
async def status_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    global last_eth_price, last_notification_price

    status_text = "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"

    if last_eth_price:
        status_text += f"üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Ä—Å: ${last_eth_price:,.2f}\n"

    if last_notification_price:
        status_text += f"üîî –ü–æ—Å–ª–µ–¥–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${last_notification_price:,.2f}\n"

    status_text += f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(user_ids)}\n"
    status_text += f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL // 60} –º–∏–Ω\n"
    status_text += f"üíµ –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${PRICE_THRESHOLD}"

    await message.answer(status_text)


@dp.message(lambda message: message.text == "/stop")
async def stop_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    user_ids.discard(message.from_user.id)
    await message.answer("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫—É—Ä—Å–µ Ethereum.")


async def send_price_notification(price, change):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not user_ids:
        return

    change_emoji = "üìà" if change > 0 else "üìâ"
    change_text = "–≤—ã—Ä–æ—Å–ª–∞" if change > 0 else "—É–ø–∞–ª–∞"

    message_text = (
        f"{change_emoji} Ethereum {change_text} –Ω–∞ ${abs(change):,.2f}!\n\n"
        f"üí∞ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: ${price:,.2f}\n"
        f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+,.2f} USD\n"
        f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in user_ids.copy():  # –ö–æ–ø–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        try:
            await bot.send_message(user_id, message_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
            if "bot was blocked" in str(e).lower():
                user_ids.discard(user_id)


async def price_monitoring():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–∞"""
    global last_eth_price, last_notification_price

    logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—É—Ä—Å–∞ Ethereum...")

    while True:
        try:
            current_price = await price_tracker.get_eth_price()

            if current_price is None:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é")
                await asyncio.sleep(CHECK_INTERVAL)
                continue

            logger.info(f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å ETH: ${current_price:,.2f}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if last_notification_price is not None:
                price_change = current_price - last_notification_price

                if abs(price_change) >= PRICE_THRESHOLD:
                    await send_price_notification(current_price, price_change)
                    last_notification_price = current_price
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞ ${price_change:+,.2f}")
            else:
                # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫–∞–∫ –±–∞–∑–æ–≤—É—é
                last_notification_price = current_price
                logger.info("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")

            last_eth_price = current_price

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ = {CHECK_INTERVAL}—Å, –ø–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π = ${PRICE_THRESHOLD}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—É—Ä—Å–∞ –≤ —Ñ–æ–Ω–µ
    monitoring_task = asyncio.create_task(price_monitoring())

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitoring_task.cancel()
        try:
            await monitoring_task
        except asyncio.CancelledError:
            pass

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        await price_tracker.close_session()
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())